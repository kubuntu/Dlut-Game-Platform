#include "jmysqllogindb.h"

#include <Global/Global>
#include <Global/Login>
#include <Global/Register>

#include <QTextCodec>
#include <QSqlDatabase>
#include <QSqlQuery>
#include <QSqlDriver>
#include <QVariant>
#include <QSqlRecord>
#include <QSqlError>
#include <QDebug>

//JMySQLLoginDB::JMySQLLoginDB(QObject *parent) :
//	JAbstractLoginDB(parent)
//{
//	if (!connectCount++) {
//		QTextCodec *codec = QTextCodec::codecForName("UTF-8");
//		QTextCodec::setCodecForCStrings(codec);
//		QTextCodec::setCodecForTr(codec);

//		loginDB = new QSqlDatabase;
//		//	loginDB->addDatabase("QMYSQL");
//		*loginDB = QSqlDatabase::addDatabase("QMYSQL", "loginDB");
//		loginDB->setHostName("localhost");
//		loginDB->setDatabaseName("dgpdb");
//		loginDB->setUserName("dgproot");
//		loginDB->setPassword("dgproot");
//		if (loginDB->open()) {
//			qDebug() << "loginDB successful";
//		} else
//			qDebug() << "loginDB fail";
//		loginDB->exec("SET NAMES 'latin1'");
//	} else {
//		//nothing...
//	}
//}

JMySQLLoginDB::JMySQLLoginDB(QSqlDatabase *dgpDB, QObject *parent) :
	JAbstractLoginDB(parent), loginDB(dgpDB)
{
	QSqlQuery *query = new QSqlQuery(*loginDB);

	qDebug() << query->driver()->hasFeature(QSqlDriver::PreparedQueries);
	qDebug() << query->driver()->hasFeature(QSqlDriver::NamedPlaceholders);
	qDebug() << query->driver()->hasFeature(QSqlDriver::PositionalPlaceholders);
}

//JMySQLLoginDB::~JMySQLLoginDB() {
//	if (!--connectCount) {
//		loginDB->close();
//		delete loginDB;
//	} else {
//		//nothing...
//	}
//}

JID JMySQLLoginDB::checkLoginName(const QString &loginName) {
	QSqlQuery *loginQuery = new QSqlQuery(*loginDB);
	loginQuery->prepare("SELECT user_id FROM user	\n"
						"WHERE user_name = :loginName");
	loginQuery->bindValue(":loginName", loginName);
	loginQuery->exec();
	if (loginQuery->next())
		return loginQuery->value(0).toInt();
	else return -1;
}

bool JMySQLLoginDB::checkPasswd(JID userID, const QString &passwd) {
	QSqlQuery *loginQuery = new QSqlQuery(*loginDB);
	loginQuery->prepare("SELECT passwd FROM user	\n"
						"WHERE user_id = :userID");
	loginQuery->bindValue(":userID", userID);
	loginQuery->exec();
	return (loginQuery->next() &&
			loginQuery->value(0).toString() == passwd);
}

bool JMySQLLoginDB::checkRole(JID userID, JID roleID) {
	QSqlQuery *loginQuery = new QSqlQuery(*loginDB);
	loginQuery->prepare("SELECT roles FROM user		\n"
						"WHERE user_id = :userID");
	loginQuery->bindValue(":userID", userID);
	loginQuery->exec();
	return (loginQuery->next() &&
			loginQuery->value(0).toInt() & (1 << roleID));
}

QString JMySQLLoginDB::getLoginName(JID userID) {
	QSqlQuery *loginQuery = new QSqlQuery(*loginDB);
	if (loginQuery->prepare("SELECT user_name FROM user		\n"
							"WHERE user_id = :userID")) {
		qDebug() << "getLoginName prepare successfully";
	} else
		qDebug() << "getLoginName prepare fail";
	loginQuery->bindValue(":userID", userID);

	//without wrong userID checking...
	if (loginQuery->exec()) {
//	if (loginQuery->exec("SELECT user_name FROM user WHERE user_id = 1001")) {
		qDebug() << "getLoginName execute successfully!";
	} else {
		qDebug() << loginQuery->lastError().databaseText();
		qDebug() << "getLoginName execute fail";
	}
	if (loginQuery->next())
		return loginQuery->value(0).toString();
	else
		return loginQuery->lastError().databaseText();
}

QString JMySQLLoginDB::getPassword(JID userID) {
	QSqlQuery *loginQuery = new QSqlQuery(*loginDB);
//	loginQuery->prepare("SELECT passwd FROM user	\n"
//						"WHERE user_id = :userID");
	if (loginQuery->prepare("SELECT passwd FROM user	\n"
							"WHERE user_id = :userID"))
		qDebug() << "getPassword prepare succ";
	else qDebug() << "getPassword prepare fail";
	loginQuery-> bindValue(":userID", userID);
	//without wrong userID checking...
//	loginQuery->exec();
	if (loginQuery->exec())
		qDebug() << "getPassword exec succ";
	else qDebug() << "getPassword exec fail";
	qDebug() << "before next";
	if (loginQuery->next()) {
		qDebug() << "getPassword has next";
		return loginQuery->value(0).toString();
	} else
		return loginQuery->lastError().databaseText();
}

JCode JMySQLLoginDB::addLoginUser(const QString &loginName, const QString &passwd) {
	QSqlQuery *loginQuery = new QSqlQuery(*loginDB);
	if (loginQuery->prepare("INSERT INTO user					\n"
						"(user_name, passwd, roles)			\n"
						"VALUES(:loginName, :passwd, :roles)"))
		qDebug() << "addLoginUser prepare succ";
	else qDebug() << "addLoginUser prepare fail";
	loginQuery->bindValue(":loginName", loginName);
	loginQuery->bindValue(":passwd", passwd);
	loginQuery->bindValue(":roles", 1 << ROLE_GAMEPLAYER);
	if (loginQuery->exec()) {
		qDebug() << "addLoginUser exec succ" ;
		return 0;
	}
	else {
		qDebug() << loginQuery->lastError();
		return ER_UserIdFull;//wrong description
	}
}

JRoleCombination JMySQLLoginDB::JMySQLLoginDB::getRoleCombination(JID userID) {
	QSqlQuery *loginQuery = new QSqlQuery(*loginDB);
	loginQuery->prepare("SELECT roles FROM user		\n"
						"WHERE user_id = :userID");
	loginQuery->bindValue(":userID", userID);
	loginQuery->exec();
	if (loginQuery->next()) {
		return loginQuery->value(0).toInt();
	}
	return -1;
}

void JMySQLLoginDB::setRoleCombination(JID userID, JRoleCombination roles) {
	QSqlQuery *loginQuery = new QSqlQuery(*loginDB);
	if (loginQuery->prepare("UPDATE user		\n"
							"SET roles = :roles		\n"
							"WHERE user_id = :userID"))
		qDebug() << "setRoleCombination prepare succ";
	else qDebug() << "setRoleCombination prepare fail";
	loginQuery->bindValue(":roles", roles);
	loginQuery->bindValue(":user_ID", userID);
	//without error checking...
	if (loginQuery->exec()) {
		qDebug() << "setRoleCombination exec succ";
	} else {
		qDebug() << loginQuery->lastError().databaseText();
		qDebug() << "setRoleCombination exec fail";
	}
}
